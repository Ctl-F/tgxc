Definitions:
ALOP:  (Arithmatic/Logic Operation)
[Reg]: Dereference Reg

Address space is 32bit. The VM Will never access more memory than 0xFFFFFFFF
While in the chart memory is segmented and separated, in implementation they will all be part of
a single buffer (With a few exceptions like the PT Jump Table) The ROM will be the lowest section
and writing to it (like NULL 0x00000000) is an invalid operation.

32 bit Register IDs:
0x00 RA   0x05 RF   0x0A IP   0x0F PF
0x01 RB   0x06 RW   0x0B JR   0x10 RI
0x02 RC   0x07 RX   0x0C SB   0x11 RJ
0x03 RD   0x08 RY   0x0D SP   0x12 RK
0x04 RE   0x09 RZ   0x0E SH   0x13 RL

PF Flag Masks
00000000 00000000 00000000 11111111   Error Code
00000000 00000000 00000001 00000000   Is Error State (triggers interrupt to jump table)
00000000 00000000 00000010 00000000   System Running (HLT sets this to zero triggering immediate shutdown)
00000000 00000000 00000100 00000000   Zero Bit (was last operation zero)
00000000 00000000 00001000 00000000   Negative Bit (was last operation negative)
00000000 00000000 00010000 00000000   Graphics Queue Available for Writing

TODO: Implement Error codes


// Verified: Low byte comes first, then high byte
16 bit Register IDs
0x00 RAL  0x05 RCH  0x0A RFL  0x0F RXH
0x01 RAH  0x06 RDL  0x0B RFH  0x10 RYL
0x02 RBL  0x07 RDH  0x0C RWL  0x11 RYH
0x03 RBH  0x08 REL  0x0D RWH  0x12 RZL
0x04 RCL  0x09 REH  0x0E RXL  0x13 RZH

Registers IP - RL cannot be directly accessed as 16 byte registers.

8 bit Register IDs
0x00 RAS  0x05 RFS
0x01 RBS  0x06 RWS
0x02 RCS  0x07 RXS
0x03 RDS  0x08 RYS
0x04 RES  0x09 RZS

64 bit Register IDs
0x00 M0
0x01 M1

Float32 Register IDs
0x00 Vec0  0x01 Vec1
0x00 FX0   0x04 FX1
0x01 FY0   0x05 FY1
0x02 FZ0   0x06 FZ1
0x03 FW0   0x07 FW1


Memory Layout

Shared Rom        (32kb)
Program Cache     (64kb)   (This is PROGRAM CACHE EXCLUSIVE memory that the Graphics Unit CANNOT access at any time)
Graphics Cache    (64kb)   (This is GRAPHICS CACHE EXCLUSIVE memory that can only be accessed when the Graphics Unit is inactive)
Graphics Queue    (8kb)
Shared RAM        (480kb)
Instruction Cache (*)      (Implementation Specific size)

Minimum Base Memory (excluding Instruction Cache): 648kb

Please note that the Stack is going to be the first 4kb of the Program Cache
The stack can be relocated and resized by modifying the SH and SB registers. The stack grows from the HEAD to the BASE, or in otherwords the SH register should always point to a higher address than SB.

Instruction Cache, for the sake of simplicity is the only implementation invariable memory block. It should still be attached
to the principle memory block, but its size is allowed to vary, it can be dynamic, or simply be allocated large enough to load
whatever program is specified. Because of this nature it should be located at the end of the Principle memory block after
all the other fixed sections of memory. Also because of this, whatever assembler/compiler is used will need to emit a linking
info document specifying all the locations where a label is used so that the TGX console can correct byte locations.

Shared ROM is a readonly block. It is loaded from disk on startup and contains the bootloader (along with any other shared
resources or kernel routines that may fit) It can be read by both the PU and the GU, as well as the EP Drivers.
Shared ROM must be provided as a flat binary file. The bootloader must start at byte 9, as the first 8 bytes will contain
a small header with a magic number and version info. It may be as simple as a routine call, or as complex as can fit into the ROM
size. It is also responsible for loading whatever User Program will get added to the Instruction Cache. Again, the implementation of TGX
may have a dynamic instruction cache or not. This implementation of TGX will not have a dynamic instruction cache. The TGX implementation may
provide SysCall codes that the bootloader can use for loading, linking, and other basic purposes.

Shared ROM must be at minimum 16kb

A Note to Memory Access. All memory addresses accessed by the PU directly are with a base (0) at the Program Cache
ROM is not directly accessible to the PU. It can be accessed by performing a syscall to copy sections of ROM into RAM
where it can be accessed.
One possible implementation of this may be via formula (Address + ROM_SIZE) % (MEMORY_SIZE - ROM_SIZE)
However in this, memory is actually just indexed from ProgramCacheBase.

0x00000000  NOP

Instruction Encoding 64bit:
[-------------Instruction Code-------------]
[CATEGORY- OPERATION]  [------PARAMS-------]   [---------------Extended Params-----------]
[00000000] [00000000]  [00000000] [00000000]   [00000000] [00000000] [00000000] [00000000]
                        DEST-REG  SOURCE-REG   [                CONST (F)32              ]
                       [                        CONST48                                  ]
                                  [             CONST40                                  ]
                                               [ CONST8 ]
                                               [     CONST16       ]

CATEGORY:
0x00  Register Move
0x01  Integer ALOP
0x02  Float ALOP
0x03  Branch Control
0x04  Memory Control

[ Register Move ]

Operations:  **Note [Destination], [Source]**

Dereference Params:
    The Params (A) is the destination register which is an id within context
    The Params (B) is the source register which is an id within context

    For the register params the top bit represents the constant offset sign
    And the first 16 bits are a constant offset for ParamA and the second
    16 bits are a constant offset for ParamB

    Thus
    [0x00 0x23] 0x00 0x01  0x0000 0x0001
    [   mov   ] [A + 0], [B + 1]
    A Gets offset by the top 16 bits which are set to zero and is thus directly writing to the address in A
    B Gets offset by the bottom 16 bits which in this case are 1, so: *A = *(B + 1)

    The top bit is the offset sign and if set to 1 then subtraction will be used, an example is if we want to allocate
    a variable on the stack (note that this order is given for example. The stack in practice should be subtracted before writing to it):


    00 0F 00 00  DE AD BE EF    mov A, 0xDEADBEEF
    00 20 8D 00  00 04 00 00    mov [SP-4], A
    01 0C 8D 00  00 00 00 04    sub SP, 4

MOV instructions will modify the PF flags Zero and Negative based on the data that was moved.
This allows users to omit an additional CMP instruction in certain cases.

0x0000      NOP
0x0001 0x00 Reg32 Move Reg32
0x0002 0x01 Reg16 Move Reg16
0x0003 0x02 Reg8 Move Reg8

0x0004 0x03 Reg64 Move Reg64
0x0005 0x05 mov [Reg32], const_32
0x0006 0x06 mov [Reg32], const_8
0x0007 0x07 TBL MOV Reg32 AT Index Const8   // Const8 is ALWAYS stored in the ext-params section. Reg32 will still be stored in the SRC param

0x0008 0x08 TBL MOV Reg32 AT Index Reg8     // Reg8 is still stored in the DEST param and Reg32 will still be in the SRC param
0x0009 0x09 Reg32 MOV TBL AT Index Const8
0x000A 0x0A Reg32 MOV TBL AT Index Reg8
0x000B 0x0B Reg32 Move Reg64-High

0x000C 0x0C Reg32 Move Reg64-Low
0x000D 0x0D Reg64-High Move Reg32
0x000E 0x0E Reg64-Low Move Reg32
0x000F 0x0F Reg32 Move Const32

0x0010 0x10 Reg16 Move Const16
0x0011 0x11 Reg8 Move Const8
0x0012 0x12 M0 Mov Const48
0x0013 0x13 M1 Mov Const48 *Unsigned Const48. If negative value is needed than an additional neg operation must be performed

0x0014 0x14 F32 Mov F32
0x0015 0x15 F32 Mov Const32
0x0016 0x16 Reg32 Mov F32 (Direct Non-Cast)
0x0017 0x17 Reg32 Mov F32 (Cast)

0x0018 0x18 F32 Mov Reg32 (Direct Non-Cast)
0x0019 0x19 F32 Mov Reg32 (Cast)
0x001A 0x1A Reg32 Mov [Reg32]
0x001B 0x1B Reg8 Mov [Reg32]

0x001C 0x1C Reg16 Mov [Reg32]
0x001D 0x1D Reg64 Mov [Reg32]
0x001E 0x1E [Reg32] Mov Reg8
0x001F 0x1F [Reg32] Mov Reg16

0x0020 0x20 [Reg32] Mov Reg32
0x0021 0x21 [Reg32] Mov Reg64
0x0022 0x22 [Reg32] Mov F32
0x0023 0x23 [Reg32] Mov [Reg32] MODE: Const8

0x0024 0x24 F32 Mov [Reg32]
0x0025 0x25 [Reg32++] Mov [Reg32++] Mode: Const8
0x0026 0x26 [Reg32--] Mov [Reg32--] Mode: Const8
0x0027 0x27 Reg32 Swap Reg32

0x0028 0x28 Reg8 Swap Reg8
0x0029 0x29 Reg16 Swap Reg16
0x002A 0x2A Reg64 Swap Reg64
0x002B 0x2B F32 Swap F32

0x002C 0x2C MemCopy From Reg32 to Reg32 Count Reg32
0x002D 0x2D MemCmp Reg32[Result] From Reg32 to Reg32 Count Reg32
0x002E 0x2E MemClr From Reg32,Reg32 value Reg8
0x002F 0x2F MemClr From Reg32,Reg32 value Reg16

0x0030 0x30 MemClr From Reg32,Reg32 value Reg32
0x0031 0x31 MemClr From Reg32,Reg32 value Reg64
0x0032 0x32 Push Reg8
0x0033 0x33 Push Const8

0x0034 0x34 Push Reg16
0x0035 0x35 Push Const16
0x0036 0x36 Push Reg32
0x0037 0x37 Push Const32

0x0038 0x38 Push Reg64
0x0039 0x39 Push Const48
0x003A 0x3A Push F32
0x003B 0x3B Push ConstF32

0x003C 0x3C Pop Reg8
0x003D 0x3D Pop Reg16
0x003E 0x3E Pop Reg32
0x003F 0x3F Pop Reg64

0x0040 0x40 Pop F32
0x0041 0x41 Push RA through RZ
0x0042 0x42 Pop RZ through RA
0x0043 0x43 Store [Reg32], TABLE Entries Reg8 COUNT Reg8

0x0044 0x44 Load TABLE, [Reg32] Entries Reg8 COUNT Reg8

*** CORRECTION ***
ALL += -= *= /= etc operators that operate BETWEEN REGISTERS
Are actually 3 parameter operators [DEST] = [SOURCE0] OP [SOURCE1]
ALL operators between a register and a CONST are 2 parameter operators [DEST] OP [CONST]
for a true += then the [DEST] and [SOURCE0] will be set to the same index.

[ Integer ALOP ]
0x0045 0x00 Reg32 += Reg32
0x0046 0x01 Reg8  += Reg8
0x0047 0x02 Reg16 += Reg16
0x0048 0x03 Reg64 += Reg64

0x0049 0x04 Reg32 += Const32
0x004A 0x05 Reg8  += Const8
0x004B 0x06 Reg16 += Const16
0x004C 0x07 Reg64 += Const40

0x004D 0x08 Reg32 -= Reg32
0x004E 0x09 Reg8  -= Reg8
0x004F 0x0A Reg16 -= Reg16
0x0050 0x0B Reg64 -= Reg64

0x0051 0x0C Reg32 -= Const32
0x0052 0x0D Reg8  -= Const8
0x0053 0x0E Reg16 -= Const16
0x0054 0x0F Reg64 -= Const40

0x0055 0x10 Reg32 *= Reg32
0x0056 0x11 Reg8  *= Reg8
0x0057 0x12 Reg16 *= Reg16
0x0058 0x13 Reg64 *= Reg64

0x0059 0x14 Reg32 *= Const32
0x005A 0x15 Reg8  *= Const8
0x005B 0x16 Reg16 *= Const16
0x005C 0x17 Reg64 *= Const40

0x005D 0x18 Reg32 /= Reg32
0x005E 0x19 Reg8  /= Reg8
0x005F 0x1A Reg16 /= Reg16
0x0060 0x1B Reg64 /= Reg64

0x0061 0x1C Reg32 /= Const32
0x0062 0x1D Reg8  /= Const8
0x0063 0x1E Reg16 /= Const16
0x0064 0x1F Reg64 /= Const40

0x0065 0x20 Reg32 %= Reg32
0x0066 0x21 Reg8  %= Reg8
0x0067 0x22 Reg16 %= Reg16
0x0068 0x23 Reg64 %= Reg64

0x0069 0x24 Reg32 %= Const32
0x006A 0x25 Reg8  %= Const8
0x006B 0x26 Reg16 %= Const16
0x006C 0x27 Reg64 %= Const40

0x006D 0x28 Neg Reg32
0x006E 0x29 Neg Reg8
0x006F 0x2A Neg Reg16
0x0070 0x2B Neg Reg64

0x0071 0x2C Inc Reg32
0x0072 0x2D Inc Reg8
0x0073 0x2E Inc Reg16
0x0074 0x2F Inc Reg64

0x0075 0x30 Dec Reg32
0x0076 0x31 Dec Reg8
0x0077 0x32 Dec Reg16
0x0078 0x33 Dec Reg64

0x0079 0x34 Reg32 >>= Reg32
0x007A 0x35 Reg8  >>= Reg8
0x007B 0x36 Reg16 >>= Reg16
0x007C 0x37 Reg64 >>= Reg64

0x007D 0x38 Reg32 >>= Const32
0x007E 0x39 Reg8  >>= Const8
0x007F 0x3A Reg16 >>= Const16
0x0080 0x3B Reg64 >>= Const40

0x0081 0x3C Reg32 <<= Reg32
0x0082 0x3D Reg8  <<= Reg8
0x0083 0x3E Reg16 <<= Reg16
0x0084 0x3F Reg64 <<= Reg64

0x0085 0x40 Reg32 <<= Const32
0x0086 0x41 Reg8  <<= Const8
0x0087 0x42 Reg16 <<= Const16
0x0088 0x43 Reg64 <<= Const40

0x0089 0x44 Cmp Reg32, Reg32
0x008A 0x45 Cmp Reg8, Reg8
0x008B 0x46 Cmp Reg16, Reg16
0x008C 0x47 Cmp Reg64, Reg64

0x008D 0x48 Cmp Reg32, Const32
0x008E 0x49 Cmp Reg8, Const8
0x008F 0x4A Cmp Reg16, Const16
0x0090 0x4B Cmp Reg64, Const40

0x0091 0x4C Reg32 &&= Reg32
0x0092 0x4D Reg8  &&= Reg8
0x0093 0x4E Reg16 &&= Reg16
0x0094 0x4F Reg64 &&= Reg64

0x0095 0x50 Reg32 ||= Reg32
0x0096 0x51 Reg8  ||= Reg8
0x0097 0x52 Reg16 ||= Reg16
0x0098 0x53 Reg64 ||= Reg64

0x0099 0x54 Reg32 = !Reg32
0x009A 0x55 Reg8  = !Reg8
0x009B 0x56 Reg16 = !Reg16
0x009C 0x57 Reg64 = !Reg64

0x009D 0x58 Reg32 &= Reg32
0x009E 0x59 Reg8  &= Reg8
0x009F 0x5A Reg16 &= Reg16
0x00A0 0x5B Reg64 &= Reg64

0x00A1 <<<< MISSING (NOP) for now

0x00A2 0x5C Reg32 ^= Reg32
0x00A3 0x5E Reg8  ^= Reg8
0x00A4 0x5F Reg16 ^= Reg16
0x00A5 0x60 Reg64 ^= Reg64

0x00A6 0x61 Reg32 |= Reg32
0x00A7 0x62 Reg8  |= Reg8
0x00A8 0x63 Reg16 |= Reg16
0x00A9 0x64 Reg64 |= Reg64

0x00AA 0x65 Reg32 = ~Reg32
0x00AB 0x66 Reg8  = ~Reg8
0x00AC 0x67 Reg16 = ~Reg16
0x00AD 0x68 Reg64 = ~Reg64

0x00AE 0x69 Reg32 = Reg32 + (Reg32 * Reg32)
0x00AF 0x6A F32   = F32 + (F32 * F32)
0x00B0 0x6B Reg32 = sqr(Reg32)
0x00B1 0x6C Reg64 = sqr(Reg64)

0x00B2 0x6D Reg8 = abs(Reg8)
0x00B3 0x6E Reg16 = abs(Reg16)
0x00B4 0x6F Reg32 = abs(Reg32)
0x00B5 0x70 Reg64 = abs(Reg64)

[ Float ALOP ]
0x00B6 0x00 F32 += F32
0x00B7 0x01 F32 += Const32
0x00B8 0x02 F32 -= F32
0x00B9 0x03 F32 -= Const32

0x00BA 0x04 F32 *= F32
0x00BB 0x05 F32 *= Const32
0x00BC 0x06 F32 /= F32
0x00BD 0x07 F32 /= Const32

0x00BE 0x08 F32 = Fmod(F32, F32)
0x00BF 0x09 F32 = Fmod(F32, Const32)
0x00C0 0x0A F32 = Floor(F32)
0x00C1 0x0B F32 = Ceil(F32)

0x00C2 0x0C F32 = Round(F32)
0x00C3 0x0D F32 = Sqrt(F32)
0x00C4 0x0E FCmp F32, F32
0x00C5 0x0F FCmp F32, Const32

0x00C6 0x10 Vec4 Normalize
0x00C7 0x11 Vec4 Add
0x00C8 0x12 Vec4 Sub
0x00C9 0x12 Vec4 Mul

0x00CA 0x13 Vec4 Div
0x00CB 0x14 F32 = Vec4 Dot
0x00CC 0x15 F32 = Vec4 Len
0x00CD 0x16 F32 = Cos(F32)

0x00CE 0x17 F32 = Cos(Const32)
0x00CF 0x18 F32 = Sin(F32)
0x00D0 0x19 F32 = Sin(Const32)
0x00D1 0x1A F32 = Tan(F32)

0x00D2 0x1B F32 = Tan(Const32)
0x00D3 0x1C F32 = ACos(F32)
0x00D4 0x1D F32 = ACos(Const32)
0x00D5 0x1E F32 = ASin(F32)

0x00D6 0x1F F32 = ASin(Const32)
0x00D7 0x20 F32 = ATan(F32)
0x00D8 0x21 F32 = ATan(Const32)
0x00D9 0x22 F32 = ATan2(F32, F32)

0x00DA 0x23 F32 = F32 * Cos(F32 * F32 + F32)
0x00DB 0x24 F32 = F32 * Sin(F32 * F32 + F32)
0x00DC 0x25 F32 = F32 * Tan(F32 * F32 + F32)
0x00DD 0x26 F32 = Neg F32

0x00DE 0x27 Vec4 = Swizzle Vec4 ON Reg16 MASK
0x00DF 0x28 F32 = Pow(F32, F32)
0x00E0 0x29 F32 = Log(F32)
0x00E1 0x2A F32 = ln(F32)

0x00E2 0x2C F32 = e**(F32)
0x00E3 0x2D F32 = PI
0x00E4 0x2E F32 = e
0x00E5 0x2F F32 = 1.0 / F32

0x00E6 0x30 F32 = abs(F32)

[ Branching ]
ElseFlag: 0x10
RegFlag: 0x01
[ Op Code 16bit] [param0 Reg32] [param1 ElseFlag|RegFlag] [Reg|Const32]
Note that the Reg is written to the first byte, therefore under common endianess that we plan on supporting
you could grab the reg as a byte, or as the full const32. If you want to support full cross-platform in this case
you are allowed to write the reg to the full const32 space and read it as an int32. Which is what this implementation
does.

0x00E7 0x00 Jmp Reg32
0x00E8 0x01 Jmp Const32
0x00E9 0x02 Jz Reg32 [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00EA 0x03 Jz Const32

0x00EB 0x04 Jnz Reg32 [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00EC 0x05 Jnz Const32
0x00ED 0x06 Jz Reg32   No else condition
0x00EE 0x07 Jnz Reg32  No else condition

0x00EF 0x08 Jgt Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00F0 0x09 Jgt Const32
0x00F1 0x0A Jlt Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00F2 0x0B Jlt Const32

0x00F3 0x0C Jge Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00F4 0x0D Jge Const32
0x00F5 0x0E Jle Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00F6 0x0F Jle Const32

0x00F7 0x10 (nop) **Jne Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00F8 0x11 (nop) **Jne Const32

0x00F9 - 0x010A are NOPS. Call functionality is handled by jumps, the call family as originally planned is redundant

0x00F9 0x12 Call Reg32
0x00FA 0x13 Call Const32

0x00FB 0x14 Callz Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00FC 0x15 Callz Const32
0x00FD 0x16 Callnz Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x00FE 0x17 Callnz Const32

0x00FF 0x18 Calleq Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x0100 0x19 Calleq Const32
0x0101 0x1A Callgt Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x0102 0x1B Callgt Const32

0x0103 0x1C Calllt Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x0104 0x1D Calllt Const32
0x0105 0x1E Callge Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x0106 0x1F Callge Const32

0x0107 0x20 Callle Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x0108 0x21 Callle Const32
0x0109 0x22 Callne Reg32 [ELSEFLAG] [REG-CONSTFLAG] [ELSEReg32|ELSEConst32]
0x010A 0x23 Callne Const32

0x010B 0x24 Ret
0x010C 0x25 Hlt
0x010D 0x26 Int Reg8
0x010E 0x27 Int Const8 *** stored in ext_params (can be written as full int32)

TODO: Implement extension port protocol
0x010F 0x28 Init-EP Reg32
0x0110 0x29 Init-EP Const32
0x0111 0x2A Invoke-EP Reg32
0x0112 0x2B Invoke-EP Const32

0x0113 0x2C Deinit-EP Reg32
0x0114 0x2D Deinit-EP Const32
0x0115 0x2E SysCall Const32
0x0116 0x2F Break **Acts as a breakpoint** TODO: implement break point.

[ Memory Control ]
TODO: Implement graphics API
0x0117 0x00 GQPS                Graphics Queue Poll Status, sets the Program Flag equality bit if the GQ and GC are free for recording
0x0118 0x01 GQS                 Graphics Queue Submit, set the availability of the GQ to false and trigger GP for rendering
0x0119 0x02 GQAI                Graphics Queue Add Instruction, add an instruction from registers and increment queue pointer
0x011A 0x03 GQR                 Graphics Queue Reset, reset the queue pointer to the start of the queue for recording
0x011B 0x04 GQSI Reg32, Reg32   Graphics Queue Set Instructions from Reg32 to Reg32 (bulk upload of instructions)
0x011C 0x05 GQPC                Graphics Queue Poll Count
0x011D 0x06 GQPF                Graphics Queue Poll Free Instructions (how many can I record before the queue is full?)

0x001E      RMOV R32, R32       Raw Move that does not affect PF


------- Graphics Unit ---------
The Graphics Unit can read memory from the Graphics Cache and the ROM. It can write only to the Graphics Cache
It is fed instructions via the Graphics Queue. The Graphics Cache may be accessed by the Program Unit ONLY WHEN
the Graphics Unit is currently Idle. When the Graphics Queue has been completed it will enter an idle state and await
the next submission.
The Graphics Queue must be large enough to hold at minimum 250 entries, but implementations may support more.

/*The limit on a single Texture Buffer (Graphics Buffer Included) is 4096x4096. This is in part in derived from the
limitation of being able to pack 4 texture coordinates into 6 bytes. We use 12bit (0xFFF) coordinates. Textures larger than
this will need to be split up. Though that shouldn't be an issue in practice as the window will never larger than this and
the probability of the TGX console ever having enough memory to support a 4k texture is unlikely*/

A command entry is 16 bytes long (int64).

[ 00 00 ] [ 00 00  00 00 00 00 ] [..]
[OPCODE ] [ PARAMS             ] [..]

OPCODES:
0x0000 Noop
0x0001 Set Config Flags
0x0002 Set Display Resolution
0x0003 Set Pixel Format
0x0004 Present Graphics Buffer

0x0100 Set Graphics Buffer Start
0x0101 Set Graphics Buffer End
0x0102 Clear Graphics Buffer

0x1000 Set Color
0x1001 Set Pixel
0x1002 Fill Region
0x1003 Fill Circle
0x1004 Fill Triangle
0x1005 Draw Line
0x1006 Draw Circle
0x1007 Draw Triangle
0x1008 Draw Poly Line
0x1009 Fill Polygon
0x100A Blit Texture
0x100B Blit Texture Region
0x100C Blit Texture Scaled

0xFFFF Signal and Await Next Queue

//(FUTURE) TileMap and TileSet api
// TODO: Fast Registers